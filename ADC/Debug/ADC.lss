
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000ed  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000b6  00000000  00000000  00000281  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000d2  00000000  00000000  00000337  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000140  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003d  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000005cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <adc_init>:
#include <util/delay.h>

void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 b9       	out	0x07, r24	; 7
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  70:	87 e8       	ldi	r24, 0x87	; 135
  72:	86 b9       	out	0x06, r24	; 6
  74:	08 95       	ret

00000076 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with ’7? will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
  76:	97 b1       	in	r25, 0x07	; 7
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with ’7? will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
  78:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
  7a:	98 7f       	andi	r25, 0xF8	; 248
  7c:	89 2b       	or	r24, r25
  7e:	87 b9       	out	0x07, r24	; 7
	
	// start single convertion
	// write ’1? to ADSC
	ADCSRA |= (1<<ADSC);
  80:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes ’0? again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  82:	36 99       	sbic	0x06, 6	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <adc_read+0xc>
	
	return (ADC);   //ADC IS THE RETURNED VALUE
  86:	84 b1       	in	r24, 0x04	; 4
  88:	95 b1       	in	r25, 0x05	; 5
	while (!(ADCSRA & (1<<ADIF)));     / * Wait until end of conversion by polling ADC interrupt flag * /
	ADCSRA |= (1<<ADIF);               / * Clear interrupt flag * /
	_delay_ms(1);                      / * Wait a little bit * /
	return ADCW;                       / * Return ADC word * /
*/
}
  8a:	08 95       	ret

0000008c <main>:


int main(void)
{
    adc_init(); 
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <adc_init>
	
	DDRB |=(1<<PD3); // oc0 pin is o/p 
  90:	bb 9a       	sbi	0x17, 3	; 23
	TCCR0 = 0x61; // fast pwm - no prescaler - oc0 pin cleared on top  
  92:	81 e6       	ldi	r24, 0x61	; 97
  94:	83 bf       	out	0x33, r24	; 51
	
 

    while (1) 
    {
		OCR0= adc_read(0); 
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 3b 00 	call	0x76	; 0x76 <adc_read>
  9c:	8c bf       	out	0x3c, r24	; 60
		
    }
  9e:	fb cf       	rjmp	.-10     	; 0x96 <main+0xa>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
